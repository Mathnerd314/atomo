macro action handle: (branches: Block) :=
  { handlers = branches contents map:
      { `(~c -> ~e) | `(~c -> restart: @use-value with: [~e])
      }

    `({ ~action with-restarts: { @use-value -> { r | r } } }
        bind: ~(`Block new: handlers))
  } call

macro a handle: (b: Block) ensuring: (c: Block) :=
  `({ ~a handle: ~b } ensuring: ~c)

(action: Block) catch: (recover: Block) :=
  { action with-restarts: {
      @use-value -> { r | r }
    }
  } bind: {
    Error -> { e | restart: @use-value with: [recover call: [e]] }
  }

macro a catch: (b: Block) ensuring: (c: Block) :=
  `({ ~a catch: ~b } ensuring: ~c)

(action: Block) ensuring: (cleanup: Block) :=
  action after: cleanup

v ensuring: p do: b :=
  { b call: [v] } ensuring: { p call: [v] }
