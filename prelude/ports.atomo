*history-file* = Parameter new: (Directory home </> ".atomo_history")
*output-port* = Parameter new: Port standard-output
*input-port* = Parameter new: Port standard-input

(x: Object) print := *output-port* _? print: x
(x: Object) display := *output-port* _? display: x

read := *input-port* _? read
read-line := *input-port* _? read-line
read-char := *input-port* _? read-char

contents := *input-port* _? contents
ready? := *input-port* _? ready?
eof? := *input-port* _? eof?


with-output-to: (fn: String) do: b :=
  { Port (new: fn mode: @write) } wrap: @close do:
    { file |
      with-output-to: file do: b
    }

with-output-to: (p: Port) do: b :=
  with: *output-port* as: p do: b

with-input-from: (fn: String) do: (b: Block) :=
  { Port (new: fn mode: @read) } wrap: @close do:
    { file |
      with-input-from: file do: b
    }

with-input-from: (p: Port) do: (b: Block) :=
  with: *input-port* as: p do: b


with-all-output-to: (fn: String) do: b :=
  { Port (new: fn mode: @write) } wrap: @close do:
    { file |
      with-all-output-to: file do: b
    }

with-all-output-to: (p: Port) do: b :=
    with-default: *output-port* as: p do: b

with-all-input-from: (fn: String) do: (b: Block) :=
  { Port (new: fn mode: @read) } wrap: @close do:
    { file |
      with-all-input-from: file do: b
    }

with-all-input-from: (p: Port) do: (b: Block) :=
  with-default: *input-port* as: p do: b


Directory copy: (from: String) to: (to: String) :=
  { Directory create-tree-if-missing: to

    Directory (contents: from) map:
      { c |
        f = from </> c
        t = to </> c

        if: Directory (exists?: f)
          then: { Directory copy: f to: t }
          else: { File copy: f to: t }
      }

    @ok
  } call
