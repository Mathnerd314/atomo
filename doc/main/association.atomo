#title:{Associations}tag:"association"

#define:{
    Association
    > Object
}body:{
    A simple mapping from one value to another.
}

#define:{
    a -> b
    > Association
}body:{
    Create a new #atomo:Association from #atomo:a to #atomo:b.
    
    This operator is right-associative and has a very low precedence level:

    #example:({
        1 -> 'a'
        True -> 10
        1 -> (2 -> (3 + 4))
    })
}

#define:{
    a from
    | a is-a?: Association
    > any
}body:{
    Yields #atomo:a's "from" value.

    #example:({
        (1 -> 'a') from
    })
}

#define:{
    a to
    | a is-a?: Association
    > any
}body:{
    Yields #atomo:a's "to" value.

    #example:({
        (1 -> 'a') to
    })
}

#define:{
    list lookup: from
    | list is-a?: List
    > in?: [@(ok: any), @none]
}body:{
    Looks up a key in a list of #atomo:Associations by #atomo:from, returning either the association's #atomo:to value or #atomo:@none.

    #example:({
        [1 -> 'a', 2 -> 'b'] lookup: 1
        [1 -> 'a', 2 -> 'b'] lookup: 5
    })
}

#define:{
    list find: from
    | list is-a?: List
    > in?: [@(ok: any), @none]
}body:{
    Similar to #atomo:(lookup:), except it returns the #atomo:Association object rather than its #atomo:to value.

    #example:({
        [1 -> 'a', 2 -> 'b'] find: 1
        [1 -> 'a', 2 -> 'b'] find: 5
    })
}

#define:{
    list set: key to: value
    | list is-a?: List
    > list
}body:{
    Sets an association from #atomo:key to #atomo:value in #atomo:list, updating an association if it exists or adding it to the list if it doesn't.

    #example:({
        [1 -> 'a', 2 -> 'b'] set: 2 to: 'B'
        [1 -> 'a', 2 -> 'b'] set: 3 to: 'c'
    })
}
