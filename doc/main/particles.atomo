#title:{Particles}tag:"particles"

#define:{
    Particle
    > Object
}body:{
    Ah, particles - an Atomo programmer's best friend. Although their primary purpose is to represent "partial messages" like #atomo:@sqrt or #atomo:@(foo: 2 bar: _), their use gracefully extends far beyond that. The fact that they can be pattern-matched makes their use as error values and success indicators very handy.

    For example, #atomo:(lookup:) uses them to indicate whether it was able to find a given key in a list of #atomo:(Association)s. If it finds the association, it returns the associated value wrapped in #atomo:@ok:. If it doesn't find it, it returns #atomo:@none. It is the dispatcher's job to decide what they want to do from there.

    #example:({
        [1 -> 'a', 2 -> 'b'] lookup: 1
        [1 -> 'a', 2 -> 'b'] lookup: 3
    })

    Many errors are also encoded as simple "structured error messages" using particles. For example, when indexing a list out of bounds:

    #interaction:({
        [1, 2, 3] at: 1
        [1, 2, 3] at: 3
    })

    This value can be caught and pattern-matched, with the keywords in the particle clearly explaining the importance and meaning of every value involved:

    #atomo-block:({ [1, 2, 3] at: 3 } handle: {
        @(out-of-bounds: idx for-list: _) ->
            "out of bounds: " (.. idx show) print
    })

    And, since they respond to #atomo:(call:), they can be used most places where you would otherwise have a block that takes certain arguments:

    #interaction:({
        [1, 2, 3] map: { n | n + 2 }
        [1, 2, 3] map: @(+ 2)
        [1, 4, 9] map: @sqrt
    })

    In this case, the values fill up the empty slots in the particle (in order), and the "completed" message is dispatched, yielding its result.

    There are two kinds of particles: single particles and keyword particles. Single particles are simple names, like #atomo:@sqrt. Keyword particles may contain more "filled-in" values, such as #atomo:@(+ 2) or #atomo:@foo:. Single particles only have one unfilled value; keyword particles can have any number of them, but they are keyword-delimited.

    Keyword particles have varying forms of syntax. #code:{@+} is equivalent to #code:{@(+ _)}. #code:{@foo:bar:} is equivalent to #code:{@(foo: _ bar: _)}.
}

#define:{
    p call: l
    | p is-a?: Particle
    | l is-a?: List
    > any
}body:{
    Complete the particle #atomo:p by taking values from #atomo:l, in order. If there are not enough values in the list to complete the particle, an error is thrown.

    #example:({
        @sqrt call: [10]
        @+ call: [1, 2]
        @+ call: [1]
    })
}

#define:{
    p name
    | p is-a?: Particle
    > String
}body:{
    Returns the name of the single particle #atomo:p.

    #example:({
        @sqrt name
    })
}

#define:{
    p names
    | p is-a?: Particle
    > String
}body:{
    Returns the names in the keyword particle #atomo:p.

    #example:({
        @+ names
        @foo:bar: names
    })
}

#define:{
    p values
    | p is-a?: Particle
    > List
}body:{
    Returns a list of the keyword particle #atomo:p's values, indicating the absense of a value with #atomo:@none and wrapping existing values in #atomo:@ok:.

    #example:({
        @+ values
        @(+ 2) values
        @(foo: _ bar: 'a') values
    })
}

#define:{
    p type
    | p is-a?: Particle
    > in?: [@single, @keyword]
}body:{
    Yields the type of the keyword - single or keyword.

    #example:({
        @sqrt type
        @+ type
        @foo:bar: type
    })
}
