#title:{Getting Started}tag:"getting-started"

#section:{A quick introduction to Atomo}

Atomo is a unique combination of many programming ideas - prototyping, message-passing, pattern matching, multiple dispatch, and message-passing concurrency being the primary ones. It eagerly evaluated, and does not have a #italic:{null} type. It supports multiple inheritance via delegation. And it's mind-bogglingly dynamic.

This guide will get you up and running with the very basics of the Atomo programming language. It assumes you have some prior programming experience, though not necessarily with a language like Atomo.


#section:{Installation}

Atomo may be installed through the #link:{Cabal}to:{http://www.haskell.org/cabal/} package managing system:

#verbatim:{cabal install atomo}

Alternatively, you can install it from the repository at #link:{darcsden}to:{http://darcsden.com/alex/atomo}:

#verbatim:{
    darcs get http://darcsden.com/alex/atomo
    cd atomo
    cabal install
}

Once that's all done, just make sure #code:{~/.cabal/bin} is in your #code:{$PATH}, and you should be all set!


#section:{Fire it up!}

To start up the Atomo REPL, just type in "atomo" at your prompt:

#verbatim:{
    $ atomo
    >
}

Now you're in the Atomo #italic:{read-evaluate-print loop}, which - as you may have guessed - takes in Atomo code, evaluates it, and prints the result, repeating this loop until you exit. You probably won't be able to do much since we haven't gotten very far yet, but here's some basic math, just for a quick taste:

#interaction:({
    1 + 1
    1 + 2 * 3
    20 sqrt
})

The REPL is readline-style, with history navigation. To exit the REPL, hit Ctrl+D.

#section:{Define & Dispatch}

There are two primary concepts in Atomo that lay the foundation for the entire language: #italic:{defining} and #italic:{dispatching}.

Defining sets a value or expression to respond to some message. Dispatching is sending a message to get a value back.

#interaction:({
    a = 1
    a
})

Here we're defining a method on the top-level object that responds to the message #atomo:a by yielding the integer #atomo:1. We then dispatch the message #atomo:a and get that integer back.

There are two operators for defining methods: #atomo:(=) and #atomo:(:=). The #atomo:(=) operator sets a value to respond to a message, while #atomo:(:=) defines a method that responds to a message by evaluating the expression. Generally you'll use #atomo:(:=) for defining methods, and #atomo:(=) for setting values.

To illustrate this example, we'll define a method that simply prints #atomo:"Hello, world!", but using both operators. Note that #atomo:print outputs the value and yields the same value.

#interaction:({
    y := "Hello, world!" print
    x = "Goodbye, world!" print
    y
    x
})

As you can see, #italic:{Goodbye, world!} was printed immediately after defining #atomo:x, with subsequent dispatches for #atomo:x simply returning the value that was printed. Conversely, #atomo:y dutifully prints #italic:{Hello, world!} with every dispatch.

But #atomo:(=) has a few more tricks up its sleeve. It can also do pattern-matching. And since it returns the same value, it can be used to set multiple values at once:

#interaction:({
    [a, _] = b = [1, 2]
    a
    b
    a = a + 1
    a
})

As you can see, first we set #atomo:b to #atomo:[1, 2], and then we immediately pattern-match #atomo:[a, _] on #atomo:b, which sets #atomo:a to #atomo:1, the first element of the list. We then re-assign #atomo:a as #atomo:(a + 1), increasing #atomo:(a)'s vlaue by 1.



#section:{Lexical Scoping via Delegation}

You'll notice earlier I used the term #italic:{top-level object} for describing the scope of the #atomo:a definition. This is the entirety of Atomo's scoping system. It's objects all the way down. The nearest lexical scope to a point in your code (henceforth called the #italic:{top-level} or #italic:{top}) is simply an object that delegates down the chain to the surrounding scope, and so on and son on until it hits rock #italic:{bottom} - #atomo:Object.

This brings you tons of delicious dynamic power, because scopes are simply objects - first-class values. With that, there's a handy dandy keyword that can be used to get all sorts of meta-information about the circumstances of a dispatch - aptly named, #atomo:(dispatch)! Want to see what a method is in the context in which your method was called? Use #atomo:(dispatch sender). Just send a message to that and you'll get a reply from the sender of the message that found your method. This is exactly how I/O works in Atomo - #atomo:print and #atomo:read-line use #atomo:(dispatch sender current-output-port) and #atomo:current-input-port for determining the port to read/write with.

#interaction:({
    x = 1
    foo := ("x is: " .. dispatch sender x show) print
    foo
    { x = 42; foo } call
    x
})

#atomo:(Block)s provide a #atomo:context method for grabbing the scope in which they were defined. Putting the pieces together, #atomo:in-context is easily defined - which converts a block into one that is evalulated in its original scope:

#interaction:({
    a = 1
    { a = a + 1 } in-context call
    a
})

What with the scoping system being objects and all, this means you can go beyond just defining "variables". When you see #atomo:(x = 1), it's not saying "set the variable #atomo:x to #atomo:1", it's saying "define a method on the top-level object that responds to #atomo:x by yielding #atomo:1". But you aren't limited to single messages like #atomo:x. Oh, no. Feel free to define a keyword method if you want, it works just fine:

#interaction:({
    foo: x := ("fooing: " .. x show) print
    foo: 42
    foo: "hello"
})

Which brings me to...

#section:{Keywords!}

In Atomo, you're either dispatching #italic:{single messages}, such as #atomo:make-sandwich, or a keyword-delimited message with multiple values, known as #italic:{keyword messages}.

#example:({
    [1, 2, 3] at: 0
    1 + 1
    [1, 2, 3, 4] at: 3 put: 5
})

The syntax for keyword dispatch is very flexible, to ease the flow of writing code that uses chains of them. For example, this syntax is perfectly valid, and is called #italic:{cascading}:

#verbatim:{
    1 (+ 2) (divides?: 6) not
}

This gets parsed as regular ol' dispatching, as in:

#atomo-block:(1 (+ 2) (divides?: 6) not)

Those parentheses at the front come at a huge cost to the flow of your writing - every time you want to add a dispatch, you would have to go back to the beginning, add a #code:{(}, and find where you were. Keyword cascades remedy that by allowing you to use parentheses wherever you are to effectively turn them into a single-dispatch syntax.


#section:{Messages & Multiple Dispatch}

In Atomo, there is no "call a method Y on object X." It's all just sending messages. When you send a message to something, it may or may not understand it - it isn't a reference to a solid method definition in any sense. So if it doesn't know how to handle the message, you get "message not understood," not "method not found."

This way of thinking makes a huge difference in how you reason about things in Atomo, especially when it comes to #italic:{multiple dispatch}. In a nutshell, multiple dispatch means you define your methods in terms of everything involved - not just one object. When you define a keyword method, it has a number of roles - objects that the method involves. If a message is not understood by one role, it moves on to the next, and so on.

If no roles understand the message, it sends either #atomo:(did-not-understand:) (for single messages) or #atomo:(did-not-understand:at:) (for keyword messages) to each object involved until one handles it. If none of them respond, you get an error.

#example:({
    X = Object clone
    X did-not-understand: m := "I have no idea what you mean by this: " .. m show
    X make-me-a-sandwich
})

That's a lot to swallow right now, so let's just dive in and play around with this thing. Let's write a small Rock-Paper-Scissors game. First we'll define the three different objects involved in the game:

#(rps = Object clone)

#interaction:({
    Rock = Object clone
    Paper = Object clone
    Scissors = Object clone
})on:rps

Pretty simple - to make a new object just clone #atomo:Object. Here we have #atomo:Rock, #atomo:Paper, and #atomo:Scissors defined and ready for action. Now comes the fun part - defining how the game works!

#interaction:({
    Rock beats?: Scissors = True
    Paper beats?: Rock = True
    Scissors beats?: Paper = True
    _ beats?: _ = False
})on:rps

The #atomo:(beats?:) method has two #italic:{roles} - the first one is being checked to see if it "beats" the second one. In this case, the standard rules apply - rock beats scissors, paper beats rock, and scissors beats paper. Let's try it out!

#interaction:({
    Rock beats?: Paper
    Rock beats?: Scissors
})on:rps

Hooray! It works! Above we defined the three winning cases, and left all the other cases to fall into the catch-all - the one defined with #atomo:_ in place of both roles. This method is the least precise out of all of them, so it only gets chosen if none of the other, more specific, definitions match the dispatch. Hence, all losing combinations yield #atomo:False.

Just for fun, let's take a peek at what the objects themselves look like now.

#interaction:({
    Rock
    Paper
    Scissors
})on:rps

As you can see, the #atomo:(beats?:) method is placed on all roles involved.
