#title:{Core}tag:"core"

#define:{
    p := e
    | p is-a?: Pattern
    | e is-a?: Expression
    > @ok
}body:{
    Defines #atomo:e to be evaluated when the message described by #atomo:p is dispatched to any of its targets. Returns #atomo:(@ok).

    When defining a method of the same name as an existing one, it will be inserted with the most precise first. If two patterns are equivalent, the new method replaces the old.

    The expression is evaluated with the bindings from the pattern as well as the context of the definition in scope.

    #example:({
        0 fib := 1
        1 fib := 1
        (n: Integer) fib := (n - 2) fib + (n - 1) fib
        5 fib
    })

    This defines three #atomo:fib methods on Integer. Note that the order of the definitions doesn't matter; they are inserted in order of precision, so the #atomo:0 and #atomo:1 pattern-matches always beat the more general #atomo:Integer match.
}

#define:{
    p = v
    | p is-a?: Pattern
    > v
}body:{
    Pattern-match #atomo:p on #atomo:v, inserting the bindings from the match into the current scope. Returns the value it's matching on (#atomo:v).

    #example:({
        a = 1
        [x, y] = [2, 3]
        @(ok: foo) = @(ok: 4)
        [a, x, y, foo]
    })

    In addition to simple pattern-matching, #atomo:(=) can also define methods, however it always evaluates the right-hand side before insertion, unlike its brethren #atomo:(:=).

    #example:({
        a = 1
        X = Object clone
        X b = a + 2
        X b
    })
}

#define:{
    this
    > Object
}body:{
    Returns the object representing the current scope. For example, typing in #atomo:this in the REPL will return the current object:

    #example:({
        this
        a = 1
        this
    })

    This is implemented like so:

    #atomo-block:(this := dispatch sender)
}

#define:{
    o clone
    > Object
}body:{
    Returns a new object, delegating to #atomo:o.
}

#define:{
    x delegates-to: y
    > @ok
}body:{
    Adds #atomo:y to #atomo:(x)'s list of delegates.
}

#define:{
    x delegates-to?: y
    > Bool
}body:{
    Returns #atomo:True if #atomo:x delegates to #atomo:y.

    #example:({
        X = Object clone
        Y = Object clone
        Y delegates-to?: X
        Y delegates-to: X
        Y delegates-to?: X
    })
}

#define:{
    x is-a?: y
    > Bool
}body:{
    Returns #atomo:True if #atomo:x is equal to #atomo:y or delegates to it, directly or indirectly.

    #example:({
        1 is-a?: Integer
        X = Object clone
        Y = Object clone
        X is-a?: X
        Y is-a?: X
        Y delegates-to: X
        Y is-a?: X
    })
}

#define:{
    x responds-to?: p
    | p is-a?: Particle
    > Bool
}body:{
    Check if object #atomo:x would respond to the partial message #atomo:p (completed with #atomo:x to form a #atomo:Message).

    #example:({
        X = Object clone
        X responds-to?: @foo
        X foo = 42
        X responds-to?: @foo
        
        1 responds-to?: @(+ 2)
        1 responds-to?: @(+ "foo")
    })
}

#define:{
    x show
    > String
}body:{
    Convert #atomo:x to a proper representation of that value in code (if possible).

    #example:({
        10 show
        "foo" show
        False show
    })
}

#define:{
    load: filename
    | filename is-a?: String
    > @ok
}body:{
    Executes the file #atomo:filename in the current scope.

    Loaded files are remembered (by their canonicalized, absolute path), so subsequent attempts to load them will be a no-op, returning #atomo:(@ok).
}

#define:{
    v join: b
    | b is-a?: Block
    > any
}body:{
    Execute #atomo:b with #atomo:v as its toplevel object, with #atomo:b's original context also in scope. Returns the result of the block's execution.

    #example:({
        True join: { not }
        1 join: { + 2 }
        x = 42
        1 join: { + x }
    })

    This can be useful for executing a block in the current scope:

    #example:({
        blk = { x = 1; x + a }

        Object clone do: {
            a = 42
            res = join: blk
        }
    })
}

#define:{
    v join: b with: l
    | b is-a?: Block
    | l is-a?: List
    > any
}body:{
    Like #atomo:(join:), but with arguments passed to the block.

    #example:({
        1 join: { a | + a } with: [2]
    })
}

#define:{
    v do: b
    | b is-a?: Block
    > v
}body:{
    Like #atomo:(join:), but returns #atomo:v. Handy for quick object creation.

    #example:({
        X = Object clone do: {
            a = 1
            b = 2
        }
    })
}

#define:{
    v do: b with: l
    | b is-a?: Block
    | l is-a?: List
    > v
}body:{
    Like #atomo:(do:), but with arguments passed to the block.

    #example:({
        X = Object clone do: { a |
            x = a
            y := a + 1
        } with: [1]
        X y
    })
}
