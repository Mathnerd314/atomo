#title:{Parameterization}tag:"parameters"

Atomo's #atomo:Parameter system provides thread-safe overriding and defining of global values. They are usually used when it may be ideal for users to override a certain value now and then, but would not be very nice as arguments passed throughout your entire system, or as toplevel values that can be modified willy-nilly.

#define:{
    Parameter new: v
    > Parameter
}body:{
    Defines a new parameter containing the initial value of #atomo:v.

    #example:({
        x = Parameter new: 20
    })
}

#define:{
    p _?
    | p is-a?: Parameter
    > any
}body:{
    Retrieves the current value of the parameter.

    #example:({
        x = Parameter new: 0
        x _?
    })
}

#define:{
    p =! v
    | p is-a?: Parameter
    > v
}body:{
    Sets #atomo:(p)'s value in the current process to #atomo:v, returning the same value back.

    #example:({
        x = Parameter new: 0
        x =! 1
        x _?
    })

    Note that this will not change the value for new processes:

    #example:({
        x = Parameter new: 0
        x =! 1
        { x _? print } spawn
        Timer sleep: 1 ms
        x _?
    })
}

#define:{
    p set-default: v
    | p is-a?: Parameter
    > v
}body:{
    Sets the default value for #atomo:p to #atomo:v, returning the same value back.

    This will not affect processes (including the current one) that have set their own values, via #atomo:(=!).
}

#define:{
    with: p as: new-value do: action
    | p is-a?: Parameter
    | action is-a?: Block
    > any
}body:{
    Temporarily sets the value for #atomo:p in the current process to #atomo:new-value.
    
    The parameter is guaranteed by #atomo:(before:after:) to be set to the new value when entering the #atomo:action continuation, and restored to the old value when leaving (or in the even of an error).

    Returns the result of #atomo:action.

    #example:({
        x = Parameter new: 0
        with: x as: 1 do: { x _? }
        x _?
    })
}

#define:{
    with-default: p as: new-value do: action
    | p is-a?: Parameter
    | action is-a?: Block
    > any
}body:{
    Similar to #atomo:(with:as:do:), but using #atomo:(set-default:).
}

#define:{
    with: bindings do: action
    | bindings is-a?: List
    | action is-a?: Block
    > any
}body:{
    Similar #atomo:(with:as:do:), but with a list of #atomo:(Association)s from #atomo:(Parameter)s to their values.

    #example:({
        x = Parameter new: 3
        y = Parameter new: 4
        with: [x -> 6, y -> 7] do: { x _? * y _? }
        x _? * y _?
    })
}

#define:{
    with-defaults: bindings do: action
    | bindings is-a?: List
    | action is-a?: Block
    > any
}body:{
    Similar #atomo:(with:do:), but using #atomo:(set-default:).
}
