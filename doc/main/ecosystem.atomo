#title:{The Ecosystem}tag:"ecosystem"

The Ecosystem (Eco for short) represents all packages and their versions used by your application at runtime, including dependency resolution and panicking if there are conflicts/unavailable packages.

Installed packages go straight to #code:{~/.eco} - binaries go to #code:{~/.eco/bin} (so you should put that in your #code:{$PATH}), and libraries go to #code:{~/.eco/lib/(package name)/(version)}.


#section:{Eco}

#define:{
    Eco
    > is-a?: Object
}body:{
    A global object that manages available and loaded packages. Your application should #atomo:initialize it at startup.
}

#define:{
    Eco load
    > @ok
}body:{
    Scan all installed packages in #code:{~/.eco/lib}. This is automatically done at startup.
}

#define:{
    Eco initialize
    > @ok
}body:{
    "Initialize" the ecosystem. Loads your package's #code:{package.eco} file and initializes each of its dependencies, recursively.

    After the initialization stage, the only packages possible to load with #atomo:(use:) will be the ones determined to be "safe" by the dependency resolution.

    If a required package is not available, #atomo:@package-unavailable:needed: is raised.
    
    If no versions of a package satisfy given constraints, #atomo:@no-versions-of:satisfy:for: is raised.
}

#define:{
    Eco path-to: pkg
    | pkg is-a?: Eco Package || pkg is-a?: String
    > String
}body:{
    Returns the full path to #code:{~/.eco/lib/(package name)}.
}

#define:{
    Eco path-to: pkg version: v
    | pkg is-a?: Eco Package || pkg is-a?: String
    | v is-a?: Version
    > String
}body:{
    Returns the full path to #code:{~/.eco/lib/(package name)/(version)}.
}

#define:{
    Eco executable: name
    | name is-a?: String
    > String
}body:{
    Returns the full path to #code:{~/.eco/bin/(executable name)}.
}

#define:{
    Eco install: path
    | path is-a?: String
    > @ok
}body:{
    Install the package at #atomo:path to #code:{~/.eco}.

    Required files: #code:{main.atomo}, #code:{package.eco}.
    
    The two required files and anything listed in the package's #atomo:(include:) field are recursively copied to #code:{~/.eco/(package name)/(package version)}.

    Files listed in the package's #atomo:(executables:) field are copied to #code:{~/.eco/bin} and their executable flag is set to True (ie, #code:{+x}).
}

#define:{
    Eco uninstall: name version: version
    | name is-a?: String
    | version is-a?: Version
    > @ok
}body:{
    Uninstall a package version. Removes its directory from #code:{~/.eco/lib}, and removes any executables.
}

#define:{
    Eco uninstall: name
    | name is-a?: String
    > @ok
}body:{
    Uninstalls all versions of a package.
}

#define:{
    top use: name
    | name is-a?: String
    > @ok
}body:{
    Alias for #atomo:(top use: name version: { True }) (that is, a constraint always yielding #atomo:True).

    #example-segment:({
        use: "ehtml"
    })
}

#define:{
    top use: name version: constraint
    | name is-a?: String
    | constraint is-a?: Block || constraint is-a?: Version
    > @ok
}body:{
    Load the highset version of package #atomo:name satisfying the constraint (or matching the version) #atomo:constraint onto #atomo:top.

    Note that this should be called after #atomo:(Eco initialize), which filters out versions that do not satisfy the package's dependency constraints.

    #example-segment:({
        use: "ecss" version: { < (0 . 2) }
    })

    Four possible exceptions may be raised:

    #definitions:{
        #item:{#atomo:@(package-unavailable: name)}is:{if the package is not installed.}

        #item:{#atomo:@(no-package-versions: name)}is:{if the package is installed, but no versions are valid (this should never happen).}

        #item:{#atomo:@(no-versions-of: (name -> versions) satisfy: constraint)}is:{if none of the package versions installed are satisfactory.}

        #item:{#atomo:@(incompatible-version-loaded: name needed: constraint)}is:{if the package was already loaded, but the version that was loaded does not satisfy #atomo:constraint. This may happen if you don't use #atomo:(Eco initialize) and just use #atomo:(use:version:) everywhere, which is not recommended.}
    }
}

#section:{Packages}

#define:{
    Eco Package
    > is-a?: Object
}body:{
    Represents a package, of a particular version, in the ecosystem.
}

#define:{
    Eco Package load-from: filename
    | file is-a?: String
    > is-a?: Eco Package
}body:{
    Loads a package from #atomo:filename, typically named #code:{package.eco}.

    Example file:

    #atomo-segment:({
        name: "ehtml"
        description: "embedded html dsl"
        version: 0 . 1
        author: "Alex Suraci"
    })

    Note that #atomo:filename should be valid Atomo source code; that's all it is. The file is loaded as-is on a new #atomo:(Eco Package); each of those lines is a dispatch.
}

#define:{
    Eco Package name: n
    | n is-a?: String
    > String
}body:{
    Sets the package's name to #atomo:n.
}

#define:{
    Eco Package description: d
    | d is-a?: String
    > String
}body:{
    Sets the package's description to #atomo:d.
}

#define:{
    Eco Package version: v
    | v is-a?: Version
    > Version
}body:{
    Sets the package's version to #atomo:v.
}

#define:{
    Eco Package author: n
    | n is-a?: String
    > String
}body:{
    Sets the package's author to #atomo:n.
}

#define:{
    Eco Package include: filenames
    | filenames is-a?: List
    > String
}body:{
    Sets the package's include field to #atomo:filenames.
}

#define:{
    Eco Package depends-on: dependencies
    | dependencies is-a?: List
    > String
}body:{
    Sets the package's dependencies field to #atomo:dependencies.

    Values in the list should be either #atomo:(Association)s from package names to a block for checking the package version, or just package names.

    For example, to depend on any version of #code:{ehtml}, and versions greater than #code:{0.1} of #code:{ecss}:

    #atomo-line:(depends-on: ["ehtml", "eccs" -> { > (0 . 1) }])
}

#define:{
    Eco Package executables: filenames
    | filenames is-a?: List
    > String
}body:{
    Sets the package's executables field to #atomo:filenames.
}

#section:{Versions}

Proper comparable version numbers. All of the usual suspects for anything that's comparable are implemented: #atomo:(==), #atomo:(>), #atomo:(<), #atomo:(>=), and #atomo:(<=). These methods are defined for all combinations of #atomo:Version and #atomo:Integer.

#example:({
    (0 . 1) < (0 . 2)
    2 > (1 . 9)
    (0 . 1) <= (0 . (1 . 1))
    (0 . 1) == (0 . 1)
    (0 . 1) == (0 . (1 . 0))
    2 == (2 . 0)
})

Note that the parentheses used in version constructors below are not necessary; they are merely here because the documentation scanner parses Atomo source and pretty-prints it, which makes the parentheses explicit.

#define:{
    Version
    > is-a?: Object
}body:{
    A version number.
}

#define:{
    major . minor
    | major is-a?: Integer
    | minor is-a?: Integer || minor is-a?: Version
    > Version
}body:{
    The primary #atomo:Version constructor.

    #example:({
        0 . 1
        1 . (2 . (0 . 3))
    })
}

#define:{
    v as: String
    | v is-a?: Version
    > String
}body:{
    Converts a #atomo:Version to the typical textual representation of version numbers.

    #example:({
        (0 . (1 . 2)) as: String
    })
}

#define:{
    n as: Version
    | n is-a?: Integer || n is-a?: String
    > Version
}body:{
    Conversion from #atomo:String is the converse of #atomo:(Version as: String).

    #example:({
        "0.1.2" as: Version
        (0 . (1 . 2)) (as: String) (as: Version)
    })

    Conversion from #atomo:Integer simply uses it as #atomo:major and #atomo:0 as #atomo:minor.

    #example:({
        1 as: Version
    })
}
