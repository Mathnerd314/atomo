Maybe = Object clone
Nothing = Maybe clone do: { show = "Nothing" }
Just: a := Maybe clone do: { value = a; show := "Just: " .. value show }

Nothing >>= _ := Nothing
(j: Maybe) >>= f := f call: [j value]

Monad = Object clone

Maybe delegates-to: Monad

macro x >> y := `(~x >>= { ~y })

macro (b: Block) do :=
  b contents reduce-right:
    { e acc |
      e match: {
        `(~x <- ~y) ->
          `(~y >>= ~(`Block new: [acc] arguments: [x as: Pattern]))

        _ -> `(~e >> ~acc)
      }
    }

`(
  { Just: 1
    Nothing
    res <- Just: 2
    Just: (res + 1)
  } do
) expand print

{ Just: 1
  Nothing
  res <- Just: 2
  Just: (res + 1)
} do print

{ Just: 1
  res <- Just: 2
  Just: (res + 1)
} do print
