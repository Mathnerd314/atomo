Generator = Object clone

(g: Generator) yield: v := g yielder = { cc |
    g control-state =! cc
    g yielder yield: v
} call/cc

(b: Block) generator :=
    Generator clone do: {
        next := control-state _? call/cc

        control-state = Parameter new: { return |
            yielder = return
            join: b
        } in-context

        join: { start |
            reset := {
                control-state =! start
                @ok
            } call
        } with: [control-state _?]
    }

-- generator for the fibonacci sequence
fib = {
    [i, j] = [0, 1]

    {
        yield: i
        [i, j] = [j, i + j]
    } repeat
} generator

-- generator for 0, 1, 2, 3, ...
foob = {
    i = 0

    {
        yield: i
        i = i + 1
    } repeat
} generator

go := 10 times: {
    (foob next show .. ": " .. fib next show) print
}

go
